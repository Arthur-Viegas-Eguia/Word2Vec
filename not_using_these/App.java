/*
 * This source file was generated by the Gradle 'init' task
 */
package messagegrabber;

import java.util.HashSet;

import org.javacord.api.DiscordApi;
import org.javacord.api.DiscordApiBuilder;
import org.javacord.api.entity.channel.Channel;
import org.javacord.api.entity.channel.ChannelType;
import org.javacord.api.entity.message.Message;
import org.javacord.api.entity.server.Server;

import java.util.Scanner;
import java.io.File;
import java.util.stream.*;
import java.io.FileWriter;

public class App {
    public static void main(String[] args) throws Exception {
        DiscordApi api = new DiscordApiBuilder()
                .setToken("") // Don't give people my token.
                .setAllIntents()
                .login().join();

        System.out.println("Bot Online");

        HashSet<Long> optedOut = new HashSet<>();
        Scanner sc = new Scanner(new File("dont-include.txt")); // get rid of people who aren't to be included
        while (sc.hasNextLine()) {
            optedOut.add(sc.nextLong());
        }
        sc.close();

        // receive command
        api.addMessageCreateListener(e -> {
            if (e.getMessageContent().equals("!scrape")) {
                System.out.println("Starting scrape.");
                Thread grabMessages = new Thread(() -> {
                    Server s = e.getServer().get();
                    for (Channel c : s.getChannels()) {
                        // grab all messages from channel
                        try {
                            File makeFile = new File("output.txt");
                            makeFile.createNewFile();
                            FileWriter write = new FileWriter(makeFile, true);
                            if (c.getType() == ChannelType.SERVER_TEXT_CHANNEL) {
                                Stream<Message> messages = c.asTextChannel().get().getMessagesAsStream();
                                messages.forEach(m -> { // for each message write contents to file
                                    if (!optedOut.contains(m.getAuthor().getId()) && !m.getContent().equals("")
                                            && !m.getAuthor().isBotUser()) { // don't include people who haven't opted
                                                                             // in or bots.
                                        try {
                                            write.write(m.getContent() + "f9w\n");
                                        } catch (Exception w) {
                                            w.printStackTrace();
                                        }
                                    }
                                });
                                System.out.println("Channel Finished.");
                                write.close();
                            }
                        } catch (Exception hi) {
                            hi.printStackTrace();
                        }
                    }
                });
                grabMessages.start();
            }
        });
    }
}
